@page "/"
@using Microsoft.EntityFrameworkCore
@inject Hub hub;
@inject List<TriviaQuestion> gameQuestions;
@inject Blazored.LocalStorage.ILocalStorageService localStorage;
@inject LakePlayContext dbContext;
@inject JsConsole jsConsole;

<PageTitle>Index</PageTitle>

<input @bind-value="_question" />
<button @onclick="OnAdd">Add</button>
<button @onclick="OnRefreshClick">Refresh</button>
<br />
<input @bind-value="_userName" />
<button @onclick="OnSaveUserName">Save</button>
<table>
    <tr>
        <th>Question</th>
    </tr>

    @foreach (var question in gameQuestions)
    {
        <tr>
            <td>@question.Text</td>
        </tr>
    }
</table>
@code {
    private string _question = string.Empty;
    private string _userName = string.Empty;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            try
            {
                if (gameQuestions.Count == 0 && dbContext?.Questions != null)
                {
                    await jsConsole.LogAsync("Before await dbContext.Questions.ToListAsync();");
                    var questions = await dbContext.Questions.ToListAsync();
                    await jsConsole.LogAsync("After await dbContext.Questions.ToListAsync();");
                    gameQuestions.AddRange(questions);
                    await jsConsole.LogAsync("After gameQuestions.AddRange(questions);");
                }
                await jsConsole.LogAsync("Before await localStorage.GetItemAsStringAsync(\"UserName\");");
                hub.Subscribe<TriviaQuestionOption>(OnTriviaRefresh);
                await jsConsole.LogAsync("After hub.Subscribe<TriviaQuestionOption>(OnTriviaRefresh);");
                _userName = await localStorage.GetItemAsStringAsync("UserName");
                await jsConsole.LogAsync("After await localStorage.GetItemAsStringAsync(\"UserName\");");
                StateHasChanged();
            }
            catch (Exception ex)
            {
                await jsConsole.LogAsync(ex.Message);
            }
    }

    private async void OnSaveUserName()
    {
        await localStorage.SetItemAsStringAsync("UserName", _userName);
    }
    private void OnAdd()
    {
        gameQuestions.Add(new TriviaQuestion() { Text = _question });
        _question = string.Empty;
        StateHasChanged();
    }
    private void OnRefreshClick()
    {
        hub.Publish<TriviaQuestionOption>(new TriviaQuestionOption());
    }

    private void OnTriviaRefresh(TriviaQuestionOption trivia)
    {
        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

}