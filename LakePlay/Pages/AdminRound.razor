@page "/adminround"

@inject NavigationManager navMan
@inject Countdown Countdown
<PageTitle>@Game?.GameName</PageTitle>
Round: @(Game!.CurrentRound - 1)

@if (Game.CurrentQuestion != null)
{
    <h3>Question</h3>
    @Game!.CurrentQuestion?.Text


    <h3>Timer</h3>
    <p class="scoreboard-font">@Countdown.Counter</p>

    @foreach (int row in rows)
    {
        <div class="hover-option-container">
            <div class="hover-option-item" @onclick="()=> OnSelectedChoice(Game!.CurrentQuestion!.ListOptions[row * 2])">
                <HoverButton Color="@OnSetButtonColor(Game!.CurrentQuestion!.ListOptions[row * 2])" style="width:100%;">
                    @Game!.CurrentQuestion!.ListOptions[(row * 2)].Text
                </HoverButton>
            </div>
            @if (Game!.CurrentQuestion!.ListOptions.Count > row * 2 + 1)
            {
                <div class="hover-option-item" @onclick="()=> OnSelectedChoice(Game!.CurrentQuestion!.ListOptions[row * 2 + 1])">
                    <HoverButton Color="@OnSetButtonColor(Game!.CurrentQuestion!.ListOptions[row * 2 + 1])" style="width:100%;">
                        @Game!.CurrentQuestion!.ListOptions[(row * 2) + 1].Text
                    </HoverButton>
                </div>
            }
        </div>
    }

}

@code {


    [Inject]
    Game? Game { get; set; }
    [Inject]
    Blazored.LocalStorage.ILocalStorageService? LocalStorage { get; set; }
    [Inject]
    JsConsole? JsConsole { get; set; }
    [Inject]
    NavigationManager? NavManager { get; set; }
    [Inject]
    ConcurrentDictionary<Guid, UserLogin>? UserLogins { get; set; }
    [Inject]
    LoginVerification? LoginVerify { get; set; }
    [Inject]
    UserLoginRepo? UserLoginRepo { get; set; }
    private UserLogin? User { get; set; }


    private bool isCorrect = false;
    private TriviaQuestionOption? selectedOption = null;
    private List<int> rows = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender == false)
        {
            return;
        }

        User = await UserLoginRepo!.Load();

        if (LoginVerify!.VerifyLogin(User, true) == false)
        {
            NavManager!.NavigateTo("/");
            return;
        }

        StateHasChanged();

        rows.Clear();

        for (int i = 0; i < (int)(Game!.CurrentQuestion!.ListOptions.Count / 2); i++)
        {
            rows.Add(i);
        }
        StateHasChanged();

        StartTimer();
    }

    private async void StartTimer()
    {
        Interlocked.Exchange(ref Countdown.Counter, 1000);
        while (Countdown.Counter > 0)
        {
            await Task.Delay(60); // Delay for 1 minute
            Interlocked.Decrement(ref Countdown.Counter);
            StateHasChanged();
        }

        // Timer is done, navigate to AdminResult
        Game!.ChangeState(GameState.Meme);
        navMan.NavigateTo($"/AdminResult/{isCorrect}");
    }

    void OnSelectedChoice(TriviaQuestionOption option)
    {
        Game!.CurrentQuestion!.AskedThisRound = true;
        Game!.CurrentQuestion!.Used = true;
        if (option.IsAnswer)
        {
            // Calculate the time it took to answer and add to the score
        }

        isCorrect = option.IsAnswer;
        selectedOption = option;
    }

    string OnSetButtonColor(TriviaQuestionOption option)
    {
        if (option.Text == selectedOption?.Text)
        {
            return "#000";
        }
        return "var(--trivia-green)";
    }
}
