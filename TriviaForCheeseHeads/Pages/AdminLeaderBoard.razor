@page "/adminleaderboard"
@inject NavigationManager navMan
<PageTitle>Trivia For Cheeseheads</PageTitle>

<div class="container">
    <div class="Header">
        <div class="header-title">
            Leaderboard
        </div>
    </div>
    <div class="Body">
        @if (Game != null)
        {
            <div>
                <img src="data:image/png;base64,@(Game!.QrCode)" alt="QR Code">
                <img src="/Kwik-Trip-Logo.jpg" alt="Login Background Title" style="width:240px;height:80px;">
                <img src="/animation_500_Transparent.gif" alt="Login Background Title" style="width:240px; height:240px;">
                <img src="/20240317_181934735_iOS.png" alt="Login Background Title" style="width:240px; height:90px;">
            </div>
            <div>
                <table id="leaderboardTable">
                    <tr>
                        <th>#</th>
                        <th>Player</th>
                        <th>Score</th>
                    </tr>
                    @foreach (var user in _playerData)
                    {
                    
                        <tr>
                            <td>@(_playerData.IndexOf(user) + 1)</td>
                            <td>@user.Value.UserName</td>
                            <td>@user.Value.Score</td>
                        </tr>
                    }
                </table>
            </div>
        }
    </div>
</div>


@code {
    [Inject]
    Game? Game { get; set; }
    [Inject]
    Blazored.LocalStorage.ILocalStorageService? LocalStorage { get; set; }
    [Inject]
    JsConsole? JsConsole { get; set; }
    [Inject]
    NavigationManager? NavManager { get; set; }
    [Inject]
    ConcurrentDictionary<Guid, UserLogin>? UserLogins { get; set; }
    [Inject]
    LoginVerification? LoginVerify { get; set; }
    [Inject]
    UserLoginRepo? UserLoginRepo { get; set; }
    private UserLogin? User { get; set; }

    private List<KeyValuePair<string, PlayerStats>> _playerData = new List<KeyValuePair<string, PlayerStats>>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                _playerData = Game!.Players.OrderByDescending(x => x.Value.Score).ToList();

                User = await UserLoginRepo!.Load();
                if (LoginVerify!.VerifyLogin(User, true) == false)
                {
                    NavManager!.NavigateTo("/");
                    return;
                }
                StateHasChanged();

            }
            catch (Exception ex)
            {
                await JsConsole!.LogAsync(ex.Message);
            }
        } else
        {

            try
            {

                await Task.Delay(Game!.LeaderboardLength * 1000);
                (bool success, string message) = Game!.PickNextQuestion();
                await JsConsole!.LogAsync(message);                
                if (success)
                {
                    navMan.NavigateTo("/AdminRound");
                    Game!.ChangeState(GameState.InRound);
                    return;
                }
                Game!.ChangeState(GameState.GameOver);
                navMan.NavigateTo("/AdminEnd");
            }
            catch (Exception ex)
            {
                await JsConsole!.LogAsync(ex.Message);
            }
        }
    }
}