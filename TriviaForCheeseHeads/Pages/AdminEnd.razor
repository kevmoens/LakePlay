@page "/adminend"
@page "/admingameover"

<PageTitle>Trivia For Cheeseheads</PageTitle>
<h1>@WinnerLabel</h1>
@if (Winners.Count > 0)
{

    <div class="center-result blinker">
        <div class="video-container">
            <table>
                <tr>
                    <th>Player</th>
                    <th>Score</th>
                    <th></th>
                </tr>
                @foreach (var winner in Winners)
                {
                    <tr>
                        <td>@winner.UserName</td>
                        <td>@winner.Score</td>
                        <td>
                            @if (ShowWinnerInfo)
                            {
                                <div style="font-size: 10px;">
                                    @winner.Email
                                </div>
                            }                            
                        </td>
                    </tr>
                }
            </table>


            <img class="image-result" src="Winner.jpg" />


        </div>
    </div>


    <button @onclick="OnWinnerInfo" style="position:fixed; 
      bottom: 5px; 
      background-color: var(--background-yellow-dark);
      border: none;
      color: white;
      padding: 5px 10px;
      text-align: center;
      text-decoration: none;
      display: inline-block;
      font-size: 8px;
     ">
        Contact Info For Winners
    </button>
}
@code {

    [Inject]
    NavigationManager? NavManager { get; set; }
    [Inject]
    ConcurrentDictionary<Guid, UserLogin>? UserLogins { get; set; }
    [Inject]
    JsConsole? JsConsole { get; set; }
    [Inject]
    LoginVerification? LoginVerify { get; set; }
    [Inject]
    UserLoginRepo? UserLoginRepo { get; set; }
    [Inject]
    Game? Game { get; set; }
    [Inject]
    Hub? Hub { get; set; }
    private UserLogin? User { get; set; }
    private bool ShowWinnerInfo { get; set; } = false;
    private List<PlayerStats> Winners = new();
    string WinnerLabel = "Winner";
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {

            try
            {
                User = await UserLoginRepo!.Load();
                if (LoginVerify!.VerifyLogin(User, true) == false)
                {
                    NavManager!.NavigateTo("/");
                    return;
                }
                StateHasChanged();

                var navigateLocation = Game!.CheckForNavigateLocation(true, GameState.GameOver);
                if (navigateLocation != "")
                {
                    NavManager!.NavigateTo(navigateLocation);
                    return;
                }
                Hub!.Subscribe<GameStateChanged>((message) =>
                {
                    var navigateLocation = Game!.CheckForNavigateLocation(true, GameState.GameOver);
                    if (navigateLocation != "")
                    {
                        NavManager!.NavigateTo(navigateLocation);
                    }
                });

                int maxScore = Game!.Players.Values.Max(player => player.Score);
                Winners = Game!.Players.Values.Where(player => player.Score == maxScore).ToList();
                if (Winners.Count > 1)
                {
                    WinnerLabel = "Winners";
                }
                StateHasChanged();
            }
            catch (Exception ex)
            {
                await JsConsole!.LogAsync(ex.Message);
            }
        }
    }

    void OnWinnerInfo()
    {
        ShowWinnerInfo = !ShowWinnerInfo;
        StateHasChanged();
    }

}